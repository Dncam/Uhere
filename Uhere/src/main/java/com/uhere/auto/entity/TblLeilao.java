package com.uhere.auto.entity;

import java.io.Serializable;
import java.util.Calendar;
import java.util.List;

import javax.persistence.Cacheable;
import javax.persistence.CascadeType;
import javax.persistence.CollectionTable;
import javax.persistence.Column;
import javax.persistence.Convert;
import javax.persistence.ElementCollection;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;
import org.hibernate.annotations.DynamicUpdate;
import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;
import org.hibernate.annotations.GenericGenerator;

import com.uhere.auto.entity.enums.Status;
import com.uhere.auto.entity.enums.Uso;
import com.uhere.auto.entity.enums.convert.ConverterStatus;
import com.uhere.auto.entity.enums.convert.ConverterUso;

/**
 * TblGec generated by hbm2java
 */
@Entity
@DynamicUpdate(true)
@Cacheable(true)
@Cache(usage=CacheConcurrencyStrategy.READ_WRITE,region="dojo2")
@Table(name = "TBL_LEILAO", catalog = "uherebd")
public class TblLeilao implements Serializable {

	private static final long serialVersionUID = 1L;

	@Id
	@GenericGenerator(name = "sequence_chave", strategy = "com.uhere.auto.model.implement.GeneratorIdTblLeilao")
	@GeneratedValue(generator = "sequence_chave")
	@Column(name = "chave", length = 10, nullable = false, unique = true, insertable=true, updatable = false)
	private String chave;

	@ManyToOne(optional = false, cascade = CascadeType.REFRESH,fetch=FetchType.EAGER)
	@JoinColumn(name = "marca", referencedColumnName = "chave", foreignKey = @ForeignKey(name = "marca_fk"), nullable = false, unique=false, insertable=true, updatable = true)
	@Fetch(FetchMode.JOIN)
	private TblMarca tblMarca;

	@ManyToOne(optional = false, cascade = CascadeType.REFRESH,fetch=FetchType.EAGER)
	@JoinColumn(name = "modelo", referencedColumnName = "chave", foreignKey = @ForeignKey(name = "modelo_fk"), nullable = false, unique=false, insertable=true, updatable = true)
	@Fetch(FetchMode.JOIN)
	private TblModelo tblModelo;
	
	@Column(name = "anoModeloMinimo", precision = 6, nullable = false, unique=false, insertable=true, updatable = true)
	private Long anoModeloMinimo;
	
	@Column(name = "anoModeloMaximo", precision = 6, nullable = false, unique=false, insertable=true, updatable = true)
	private Long anoModeloMaximo;
	
	@ManyToOne(optional = false, cascade = CascadeType.REFRESH,fetch=FetchType.LAZY)
	@JoinColumn(name = "usuario",nullable=false, unique=false, insertable=true, updatable=true, referencedColumnName = "cpfCnpj", foreignKey = @ForeignKey(name = "usuario_fk"))
	@Fetch(FetchMode.SELECT)
	private TblUsuario tblUsuario;
	
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name="dtPublicacao", nullable = false, unique=false, insertable=true, updatable = true)
	private Calendar dtPublicacao;
	
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name="dtValidade", nullable = false, unique=false, insertable=true, updatable = true)
	private Calendar dtValidade;
	
	@Convert(converter=ConverterStatus.class)
	@Column(name = "status", nullable = false, unique=false, insertable=true, updatable = true)
	private Status status ;

	@ManyToOne(optional = true,cascade=CascadeType.REFRESH,fetch=FetchType.LAZY)
	@JoinColumn(name = "uf", referencedColumnName = "chave",foreignKey=@ForeignKey(name="uf_fk"),unique=false, nullable=false, updatable=true, insertable=true)
	@Fetch(FetchMode.SELECT)
	private TblUf tblUf;
	
	@OneToMany
	@JoinTable(name = "TBL_LEILAO_CIDADE", joinColumns = @JoinColumn(name = "cidade_fk"), inverseJoinColumns = @JoinColumn(name = "leilao_fk"))
	private List<TblCidade> tblCidade;
	
	@OneToMany
	@JoinTable(name = "TBL_LEILAO_CAMBIO", joinColumns = @JoinColumn(name = "cambio_fk"), inverseJoinColumns = @JoinColumn(name = "leilao_fk"))
	private List<TblCambio> tblCambio;

	@OneToMany
	@JoinTable(name = "TBL_LEILAO_COMBUSTIVEL", joinColumns = @JoinColumn(name = "combustivel_fk"), inverseJoinColumns = @JoinColumn(name = "leilao_fk"))
	private List<TblCombustivel> tblCombustivel;

	@OneToMany
	@JoinTable(name = "TBL_LEILAO_CARROCERIA", joinColumns = @JoinColumn(name = "carroceria_fk"), inverseJoinColumns = @JoinColumn(name = "leilao_fk"))
	private List<TblCarroceria> tblCarroceria;

	@OneToMany
	@JoinTable(name = "TBL_LEILAO_COR", joinColumns = @JoinColumn(name = "cor_fk"), inverseJoinColumns = @JoinColumn(name = "leilao_fk"))
	private List<TblCor> tblCor;
	
	@Column(name = "quilometragemMinimo", precision = 6, nullable = false, unique=false, insertable=true, updatable = true)
	private Long quilometragemMinimo;
	
	@Column(name = "quilometragemMaxima", precision = 6, nullable = false, unique=false, insertable=true, updatable = true)
	private Long quilometragemMaxima;
	
	@ElementCollection
	@CollectionTable(name = "TBL_LEILAO_PLACA", joinColumns = @JoinColumn(name = "chave"),schema="uherebd")
	@Column(name = "placa",  nullable = false, unique=false, insertable=true, updatable = true)
	private List<Integer> placa;

	@ElementCollection
	@CollectionTable(name = "TBL_LEILAO_PORTA", joinColumns = @JoinColumn(name = "chave"),schema="uherebd")
	@Column(name = "portas",  nullable = false, unique=false, insertable=true, updatable = true)
	private List<Integer> portas;
	
	@ElementCollection
	@CollectionTable(name = "TBL_LEILAO_BLINDAGEM", joinColumns = @JoinColumn(name = "chave"),schema="uherebd")
	@Column(name = "blindagem",  nullable = false, unique=false, insertable=true, updatable = true)
	private List<Boolean> blindagem;
	
	@ElementCollection
	@CollectionTable(name = "TBL_LEILAO_USO", joinColumns = @JoinColumn(name = "chave"),schema="uherebd")
	@Column(name = "uso",  nullable = false, unique=false, insertable=true, updatable = true)
	@Convert(converter=ConverterUso.class)
	private List<Uso> uso;
	
	@OneToMany
	@JoinTable(name = "TBL_LEILAO_DOCUMENTACAO", joinColumns = @JoinColumn(name = "documentacao_fk"), inverseJoinColumns = @JoinColumn(name = "leilao_fk"))
	private List<TblDocumentacao> tblDocumentacao;

	@OneToMany
	@JoinTable(name = "TBL_LEILAO_NECESSIDADE", joinColumns = @JoinColumn(name = "necessidade_fk"), inverseJoinColumns = @JoinColumn(name = "leilao_fk"))
	private List<TblNecessidade> tblNecessidade;

	@OneToMany
	@JoinTable(name = "TBL_LEILAO_OPCIONAIS", joinColumns = @JoinColumn(name = "opcionais_fk"), inverseJoinColumns = @JoinColumn(name = "leilao_fk"))
	private List<TblOpcionais> tblOpcionais;

	@OneToMany
	@JoinTable(name = "TBL_LEILAO_TIPO_ANUNCIO", joinColumns = @JoinColumn(name = "tipo_anuncio_fk"), inverseJoinColumns = @JoinColumn(name = "leilao_fk"))
	private List<TblTipoAnuncio> tblTipoAnuncio;
	
	@Column(name = "troca", nullable = false, unique=false, insertable=true, updatable = true)
	private Boolean troca = false;
	
	public TblLeilao() {
		super();
	}

	public TblLeilao(String chave, TblMarca tblMarca, TblModelo tblModelo, Long anoModeloMinimo, Long anoModeloMaximo,
			TblUsuario tblUsuario, Calendar dtPublicacao, Calendar dtValidade, Status status, TblUf tblUf,
			List<TblCidade> tblCidade, List<TblCambio> tblCambio, List<TblCombustivel> tblCombustivel,
			List<TblCarroceria> tblCarroceria, List<TblCor> tblCor, Long quilometragemMinimo, Long quilometragemMaxima,
			List<Integer> placa, List<Integer> portas, List<Boolean> blindagem, List<Uso> uso,
			List<TblDocumentacao> tblDocumentacao, List<TblNecessidade> tblNecessidade, List<TblOpcionais> tblOpcionais,
			List<TblTipoAnuncio> tblTipoAnuncio, Boolean troca) {
		super();
		this.chave = chave;
		this.tblMarca = tblMarca;
		this.tblModelo = tblModelo;
		this.anoModeloMinimo = anoModeloMinimo;
		this.anoModeloMaximo = anoModeloMaximo;
		this.tblUsuario = tblUsuario;
		this.dtPublicacao = dtPublicacao;
		this.dtValidade = dtValidade;
		this.status = status;
		this.tblUf = tblUf;
		this.tblCidade = tblCidade;
		this.tblCambio = tblCambio;
		this.tblCombustivel = tblCombustivel;
		this.tblCarroceria = tblCarroceria;
		this.tblCor = tblCor;
		this.quilometragemMinimo = quilometragemMinimo;
		this.quilometragemMaxima = quilometragemMaxima;
		this.placa = placa;
		this.portas = portas;
		this.blindagem = blindagem;
		this.uso = uso;
		this.tblDocumentacao = tblDocumentacao;
		this.tblNecessidade = tblNecessidade;
		this.tblOpcionais = tblOpcionais;
		this.tblTipoAnuncio = tblTipoAnuncio;
		this.troca = troca;
	}

	public String getChave() {
		return chave;
	}

	public void setChave(String chave) {
		this.chave = chave;
	}

	public TblMarca getTblMarca() {
		return tblMarca;
	}

	public void setTblMarca(TblMarca tblMarca) {
		this.tblMarca = tblMarca;
	}

	public TblModelo getTblModelo() {
		return tblModelo;
	}

	public void setTblModelo(TblModelo tblModelo) {
		this.tblModelo = tblModelo;
	}

	public Long getAnoModeloMinimo() {
		return anoModeloMinimo;
	}

	public void setAnoModeloMinimo(Long anoModeloMinimo) {
		this.anoModeloMinimo = anoModeloMinimo;
	}

	public Long getAnoModeloMaximo() {
		return anoModeloMaximo;
	}

	public void setAnoModeloMaximo(Long anoModeloMaximo) {
		this.anoModeloMaximo = anoModeloMaximo;
	}

	public TblUsuario getTblUsuario() {
		return tblUsuario;
	}

	public void setTblUsuario(TblUsuario tblUsuario) {
		this.tblUsuario = tblUsuario;
	}

	public Calendar getDtPublicacao() {
		return dtPublicacao;
	}

	public void setDtPublicacao(Calendar dtPublicacao) {
		this.dtPublicacao = dtPublicacao;
	}

	public Calendar getDtValidade() {
		return dtValidade;
	}

	public void setDtValidade(Calendar dtValidade) {
		this.dtValidade = dtValidade;
	}

	public Status getStatus() {
		return status;
	}

	public void setStatus(Status status) {
		this.status = status;
	}

	public TblUf getTblUf() {
		return tblUf;
	}

	public void setTblUf(TblUf tblUf) {
		this.tblUf = tblUf;
	}

	public List<TblCidade> getTblCidade() {
		return tblCidade;
	}

	public void setTblCidade(List<TblCidade> tblCidade) {
		this.tblCidade = tblCidade;
	}

	public List<TblCambio> getTblCambio() {
		return tblCambio;
	}

	public void setTblCambio(List<TblCambio> tblCambio) {
		this.tblCambio = tblCambio;
	}

	public List<TblCombustivel> getTblCombustivel() {
		return tblCombustivel;
	}

	public void setTblCombustivel(List<TblCombustivel> tblCombustivel) {
		this.tblCombustivel = tblCombustivel;
	}

	public List<TblCarroceria> getTblCarroceria() {
		return tblCarroceria;
	}

	public void setTblCarroceria(List<TblCarroceria> tblCarroceria) {
		this.tblCarroceria = tblCarroceria;
	}

	public List<TblCor> getTblCor() {
		return tblCor;
	}

	public void setTblCor(List<TblCor> tblCor) {
		this.tblCor = tblCor;
	}

	public Long getQuilometragemMinimo() {
		return quilometragemMinimo;
	}

	public void setQuilometragemMinimo(Long quilometragemMinimo) {
		this.quilometragemMinimo = quilometragemMinimo;
	}

	public Long getQuilometragemMaxima() {
		return quilometragemMaxima;
	}

	public void setQuilometragemMaxima(Long quilometragemMaxima) {
		this.quilometragemMaxima = quilometragemMaxima;
	}

	public List<Integer> getPlaca() {
		return placa;
	}

	public void setPlaca(List<Integer> placa) {
		this.placa = placa;
	}

	public List<Integer> getPortas() {
		return portas;
	}

	public void setPortas(List<Integer> portas) {
		this.portas = portas;
	}

	public List<Boolean> getBlindagem() {
		return blindagem;
	}

	public void setBlindagem(List<Boolean> blindagem) {
		this.blindagem = blindagem;
	}

	public List<Uso> getUso() {
		return uso;
	}

	public void setUso(List<Uso> uso) {
		this.uso = uso;
	}

	public List<TblDocumentacao> getTblDocumentacao() {
		return tblDocumentacao;
	}

	public void setTblDocumentacao(List<TblDocumentacao> tblDocumentacao) {
		this.tblDocumentacao = tblDocumentacao;
	}

	public List<TblNecessidade> getTblNecessidade() {
		return tblNecessidade;
	}

	public void setTblNecessidade(List<TblNecessidade> tblNecessidade) {
		this.tblNecessidade = tblNecessidade;
	}

	public List<TblOpcionais> getTblOpcionais() {
		return tblOpcionais;
	}

	public void setTblOpcionais(List<TblOpcionais> tblOpcionais) {
		this.tblOpcionais = tblOpcionais;
	}

	public List<TblTipoAnuncio> getTblTipoAnuncio() {
		return tblTipoAnuncio;
	}

	public void setTblTipoAnuncio(List<TblTipoAnuncio> tblTipoAnuncio) {
		this.tblTipoAnuncio = tblTipoAnuncio;
	}

	public Boolean getTroca() {
		return troca;
	}

	public void setTroca(Boolean troca) {
		this.troca = troca;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((anoModeloMaximo == null) ? 0 : anoModeloMaximo.hashCode());
		result = prime * result + ((anoModeloMinimo == null) ? 0 : anoModeloMinimo.hashCode());
		result = prime * result + ((blindagem == null) ? 0 : blindagem.hashCode());
		result = prime * result + ((chave == null) ? 0 : chave.hashCode());
		result = prime * result + ((dtPublicacao == null) ? 0 : dtPublicacao.hashCode());
		result = prime * result + ((dtValidade == null) ? 0 : dtValidade.hashCode());
		result = prime * result + ((placa == null) ? 0 : placa.hashCode());
		result = prime * result + ((portas == null) ? 0 : portas.hashCode());
		result = prime * result + ((quilometragemMaxima == null) ? 0 : quilometragemMaxima.hashCode());
		result = prime * result + ((quilometragemMinimo == null) ? 0 : quilometragemMinimo.hashCode());
		result = prime * result + ((status == null) ? 0 : status.hashCode());
		result = prime * result + ((tblCambio == null) ? 0 : tblCambio.hashCode());
		result = prime * result + ((tblCarroceria == null) ? 0 : tblCarroceria.hashCode());
		result = prime * result + ((tblCidade == null) ? 0 : tblCidade.hashCode());
		result = prime * result + ((tblCombustivel == null) ? 0 : tblCombustivel.hashCode());
		result = prime * result + ((tblCor == null) ? 0 : tblCor.hashCode());
		result = prime * result + ((tblDocumentacao == null) ? 0 : tblDocumentacao.hashCode());
		result = prime * result + ((tblMarca == null) ? 0 : tblMarca.hashCode());
		result = prime * result + ((tblModelo == null) ? 0 : tblModelo.hashCode());
		result = prime * result + ((tblNecessidade == null) ? 0 : tblNecessidade.hashCode());
		result = prime * result + ((tblOpcionais == null) ? 0 : tblOpcionais.hashCode());
		result = prime * result + ((tblTipoAnuncio == null) ? 0 : tblTipoAnuncio.hashCode());
		result = prime * result + ((tblUf == null) ? 0 : tblUf.hashCode());
		result = prime * result + ((tblUsuario == null) ? 0 : tblUsuario.hashCode());
		result = prime * result + ((troca == null) ? 0 : troca.hashCode());
		result = prime * result + ((uso == null) ? 0 : uso.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		TblLeilao other = (TblLeilao) obj;
		if (anoModeloMaximo == null) {
			if (other.anoModeloMaximo != null)
				return false;
		} else if (!anoModeloMaximo.equals(other.anoModeloMaximo))
			return false;
		if (anoModeloMinimo == null) {
			if (other.anoModeloMinimo != null)
				return false;
		} else if (!anoModeloMinimo.equals(other.anoModeloMinimo))
			return false;
		if (blindagem == null) {
			if (other.blindagem != null)
				return false;
		} else if (!blindagem.equals(other.blindagem))
			return false;
		if (chave == null) {
			if (other.chave != null)
				return false;
		} else if (!chave.equals(other.chave))
			return false;
		if (dtPublicacao == null) {
			if (other.dtPublicacao != null)
				return false;
		} else if (!dtPublicacao.equals(other.dtPublicacao))
			return false;
		if (dtValidade == null) {
			if (other.dtValidade != null)
				return false;
		} else if (!dtValidade.equals(other.dtValidade))
			return false;
		if (placa == null) {
			if (other.placa != null)
				return false;
		} else if (!placa.equals(other.placa))
			return false;
		if (portas == null) {
			if (other.portas != null)
				return false;
		} else if (!portas.equals(other.portas))
			return false;
		if (quilometragemMaxima == null) {
			if (other.quilometragemMaxima != null)
				return false;
		} else if (!quilometragemMaxima.equals(other.quilometragemMaxima))
			return false;
		if (quilometragemMinimo == null) {
			if (other.quilometragemMinimo != null)
				return false;
		} else if (!quilometragemMinimo.equals(other.quilometragemMinimo))
			return false;
		if (status != other.status)
			return false;
		if (tblCambio == null) {
			if (other.tblCambio != null)
				return false;
		} else if (!tblCambio.equals(other.tblCambio))
			return false;
		if (tblCarroceria == null) {
			if (other.tblCarroceria != null)
				return false;
		} else if (!tblCarroceria.equals(other.tblCarroceria))
			return false;
		if (tblCidade == null) {
			if (other.tblCidade != null)
				return false;
		} else if (!tblCidade.equals(other.tblCidade))
			return false;
		if (tblCombustivel == null) {
			if (other.tblCombustivel != null)
				return false;
		} else if (!tblCombustivel.equals(other.tblCombustivel))
			return false;
		if (tblCor == null) {
			if (other.tblCor != null)
				return false;
		} else if (!tblCor.equals(other.tblCor))
			return false;
		if (tblDocumentacao == null) {
			if (other.tblDocumentacao != null)
				return false;
		} else if (!tblDocumentacao.equals(other.tblDocumentacao))
			return false;
		if (tblMarca == null) {
			if (other.tblMarca != null)
				return false;
		} else if (!tblMarca.equals(other.tblMarca))
			return false;
		if (tblModelo == null) {
			if (other.tblModelo != null)
				return false;
		} else if (!tblModelo.equals(other.tblModelo))
			return false;
		if (tblNecessidade == null) {
			if (other.tblNecessidade != null)
				return false;
		} else if (!tblNecessidade.equals(other.tblNecessidade))
			return false;
		if (tblOpcionais == null) {
			if (other.tblOpcionais != null)
				return false;
		} else if (!tblOpcionais.equals(other.tblOpcionais))
			return false;
		if (tblTipoAnuncio == null) {
			if (other.tblTipoAnuncio != null)
				return false;
		} else if (!tblTipoAnuncio.equals(other.tblTipoAnuncio))
			return false;
		if (tblUf == null) {
			if (other.tblUf != null)
				return false;
		} else if (!tblUf.equals(other.tblUf))
			return false;
		if (tblUsuario == null) {
			if (other.tblUsuario != null)
				return false;
		} else if (!tblUsuario.equals(other.tblUsuario))
			return false;
		if (troca == null) {
			if (other.troca != null)
				return false;
		} else if (!troca.equals(other.troca))
			return false;
		if (uso == null) {
			if (other.uso != null)
				return false;
		} else if (!uso.equals(other.uso))
			return false;
		return true;
	}

	@Override
	public String toString() {
		return "TblLeilao [chave=" + chave + ", tblMarca=" + tblMarca + ", tblModelo=" + tblModelo
				+ ", anoModeloMinimo=" + anoModeloMinimo + ", anoModeloMaximo=" + anoModeloMaximo + ", tblUsuario="
				+ tblUsuario + ", dtPublicacao=" + dtPublicacao + ", dtValidade=" + dtValidade + ", status=" + status
				+ ", tblUf=" + tblUf + ", tblCidade=" + tblCidade + ", tblCambio=" + tblCambio + ", tblCombustivel="
				+ tblCombustivel + ", tblCarroceria=" + tblCarroceria + ", tblCor=" + tblCor + ", quilometragemMinimo="
				+ quilometragemMinimo + ", quilometragemMaxima=" + quilometragemMaxima + ", placa=" + placa
				+ ", portas=" + portas + ", blindagem=" + blindagem + ", uso=" + uso + ", tblDocumentacao="
				+ tblDocumentacao + ", tblNecessidade=" + tblNecessidade + ", tblOpcionais=" + tblOpcionais
				+ ", tblTipoAnuncio=" + tblTipoAnuncio + ", troca=" + troca + "]";
	}

	
}
