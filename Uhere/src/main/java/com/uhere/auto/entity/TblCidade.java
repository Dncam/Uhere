package com.uhere.auto.entity;

import javax.persistence.Cacheable;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;
import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

import com.fasterxml.jackson.annotation.JsonIgnore;

/**
 * TblGec generated by hbm2java
 */
@Entity
@Cacheable(true)
@Cache(usage=CacheConcurrencyStrategy.READ_ONLY,region="eternal")
@Table(name = "TBL_CIDADE", catalog = "uherebd")
public class TblCidade implements java.io.Serializable {
	
	private static final long serialVersionUID = 1L;
	
	@Id
	@Column(name = "chave", unique = true, nullable = false, updatable=false,insertable=false)
	private Long chave;
	
	@Column(name = "descricao",unique = false, nullable = false, length = 50, updatable=false,insertable=false)
	private String descricao;
	
	@JsonIgnore
	@ManyToOne(cascade=CascadeType.REFRESH,fetch=FetchType.LAZY)
	@JoinColumn(name = "uf", referencedColumnName = "chave",foreignKey=@ForeignKey(name="uf_fk"),nullable = false, updatable=false, insertable=false)
	@Fetch(FetchMode.SELECT)
	private TblUf tblUf;

	public TblCidade() {
		super();
	}

	public TblCidade(Long chave) {
		super();
		this.chave = chave;
	}

	public TblCidade(Long chave, String descricao, TblUf tblUf) {
		super();
		this.chave = chave;
		this.descricao = descricao;
		this.tblUf = tblUf;
	}

	public Long getChave() {
		return chave;
	}

	public void setChave(Long chave) {
		this.chave = chave;
	}

	public String getDescricao() {
		return descricao;
	}

	public void setDescricao(String descricao) {
		this.descricao = descricao;
	}

	public TblUf getTblUf() {
		return tblUf;
	}

	public void setTblUf(TblUf tblUf) {
		this.tblUf = tblUf;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((chave == null) ? 0 : chave.hashCode());
		result = prime * result + ((descricao == null) ? 0 : descricao.hashCode());
		result = prime * result + ((tblUf == null) ? 0 : tblUf.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		TblCidade other = (TblCidade) obj;
		if (chave == null) {
			if (other.chave != null)
				return false;
		} else if (!chave.equals(other.chave))
			return false;
		if (descricao == null) {
			if (other.descricao != null)
				return false;
		} else if (!descricao.equals(other.descricao))
			return false;
		if (tblUf == null) {
			if (other.tblUf != null)
				return false;
		} else if (!tblUf.equals(other.tblUf))
			return false;
		return true;
	}

	@Override
	public String toString() {
		return "TblCidade [chave=" + chave + ", descricao=" + descricao + ", tblUf=" + tblUf + "]";
	}
}
