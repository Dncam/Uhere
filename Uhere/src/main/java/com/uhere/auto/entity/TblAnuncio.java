package com.uhere.auto.entity;

import java.math.BigDecimal;
import java.util.Calendar;

import javax.persistence.Cacheable;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Convert;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;
import org.hibernate.annotations.DynamicUpdate;
import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;
import org.hibernate.annotations.GenericGenerator;
import org.springframework.format.annotation.NumberFormat;
import org.springframework.format.annotation.NumberFormat.Style;

import com.uhere.auto.entity.enums.Status;
import com.uhere.auto.entity.enums.convert.ConverterStatus;

/**
 * TblGec generated by hbm2java
 */
@Entity
@DynamicUpdate(true)
@Cacheable(true)
@Cache(usage=CacheConcurrencyStrategy.READ_WRITE,region="dojo2")
@Table(name = "TBL_ANUNCIO", catalog = "uherebd")
public class TblAnuncio implements java.io.Serializable {


	/**
	 * 
	 */
	private static final long serialVersionUID = 4938361344536680346L;

	@Id
	@GenericGenerator(name = "sequence_chave", strategy = "com.uhere.auto.model.implement.GeneratorIdTblAnuncio")
	@GeneratedValue(generator = "sequence_chave")
	@Column(name = "chave", length = 10, nullable = false, unique = true, insertable=true, updatable = false)
	private String chave;

	@Column(name = "descricao", length = 400, nullable = false, unique=false, insertable=true, updatable = true)
	private String descricao;

	@ManyToOne(optional = false, cascade = CascadeType.REFRESH,fetch=FetchType.LAZY)
	@JoinColumn(name = "usuario",nullable=false, unique=false, insertable=true, updatable=true, referencedColumnName = "cpfCnpj", foreignKey = @ForeignKey(name = "usuario_fk"))
	@Fetch(FetchMode.SELECT)
	private TblUsuario tblUsuario;

	@ManyToOne(optional = false, cascade = {CascadeType.PERSIST,CascadeType.MERGE},fetch=FetchType.EAGER)
	@JoinColumn(name = "veiculo",nullable=false, insertable=true, updatable=true, referencedColumnName = "renavam", foreignKey = @ForeignKey(name = "veiculo_fk"))
	@Fetch(FetchMode.JOIN)
	private TblVeiculo tblVeiculo;

	@Column(name = "precoInicial", nullable = false, unique=false, insertable=true, updatable = true)
	@NumberFormat(style=Style.NUMBER)
	private BigDecimal precoInicial;

	@Column(name = "precoFinal", nullable = false, unique=false, insertable=true, updatable = true)
	@NumberFormat(style=Style.NUMBER)
	private BigDecimal precoFinal;

	@ManyToOne(optional = false, cascade = CascadeType.REFRESH,fetch=FetchType.LAZY)
	@JoinColumn(name = "tipoAnuncio",nullable = false, unique=false, insertable=true, updatable = true, referencedColumnName = "chave", foreignKey = @ForeignKey(name = "tipoAnuncio_fk"))
	@Fetch(FetchMode.JOIN)
	private TblTipoAnuncio tblTipoAnuncio;

	@Column(name = "troca", nullable = false, unique=false, insertable=true, updatable = true)
	private Boolean troca = false;
	
	@Column(name = "leilao",nullable = false, unique=false, insertable=true, updatable = true)
	private Boolean leilao = true;

	@Convert(converter=ConverterStatus.class)
	@Column(name = "status", nullable = false, unique=false, insertable=true, updatable = true)
	private Status status;
	
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name="dtPublicacao", nullable = false, unique=false, insertable=true, updatable = true)
	private Calendar dtPublicacao;
	
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name="validade", nullable = false, unique=false, insertable=true, updatable = true)
	private Calendar validade;
	
	@ManyToOne(optional = true,cascade=CascadeType.REFRESH,fetch=FetchType.LAZY)
	@JoinColumn(name = "uf", referencedColumnName = "chave",foreignKey=@ForeignKey(name="uf_fk"),unique=false, nullable=false, updatable=true, insertable=true)
	@Fetch(FetchMode.SELECT)
	private TblUf tblUf;
	
	@ManyToOne(optional = true,cascade=CascadeType.REFRESH,fetch=FetchType.LAZY)
	@JoinColumn(name = "cidade", referencedColumnName = "chave",foreignKey=@ForeignKey(name="cidade_fk"),unique=false, nullable=false, updatable=true, insertable=true)
	@Fetch(FetchMode.SELECT)
	private TblCidade tblCidade;

	public TblAnuncio() {
		super();
	}

	public TblAnuncio(String chave, String descricao, TblUsuario tblUsuario, TblVeiculo tblVeiculo,
			BigDecimal precoInicial, BigDecimal precoFinal, TblTipoAnuncio tblTipoAnuncio, Boolean troca, Boolean leilao,
			Status status, Calendar dtPublicacao, Calendar validade, TblUf tblUf, TblCidade tblCidade) {
		super();
		this.chave = chave;
		this.descricao = descricao;
		this.tblUsuario = tblUsuario;
		this.tblVeiculo = tblVeiculo;
		this.precoInicial = precoInicial;
		this.precoFinal = precoFinal;
		this.tblTipoAnuncio = tblTipoAnuncio;
		this.troca = troca;
		this.leilao = leilao;
		this.status = status;
		this.dtPublicacao = dtPublicacao;
		this.validade = validade;
		this.tblUf = tblUf;
		this.tblCidade = tblCidade;
	}

	public String getChave() {
		return chave;
	}

	public void setChave(String chave) {
		this.chave = chave;
	}

	public String getDescricao() {
		return descricao;
	}

	public void setDescricao(String descricao) {
		this.descricao = descricao;
	}

	public TblUsuario getTblUsuario() {
		return tblUsuario;
	}

	public void setTblUsuario(TblUsuario tblUsuario) {
		this.tblUsuario = tblUsuario;
	}

	public TblVeiculo getTblVeiculo() {
		return tblVeiculo;
	}

	public void setTblVeiculo(TblVeiculo tblVeiculo) {
		this.tblVeiculo = tblVeiculo;
	}

	public BigDecimal getPrecoInicial() {
		return precoInicial;
	}

	public void setPrecoInicial(BigDecimal precoInicial) {
		this.precoInicial = precoInicial;
	}

	public BigDecimal getPrecoFinal() {
		return precoFinal;
	}

	public void setPrecoFinal(BigDecimal precoFinal) {
		this.precoFinal = precoFinal;
	}

	public TblTipoAnuncio getTblTipoAnuncio() {
		return tblTipoAnuncio;
	}

	public void setTblTipoAnuncio(TblTipoAnuncio tblTipoAnuncio) {
		this.tblTipoAnuncio = tblTipoAnuncio;
	}

	public Boolean getTroca() {
		return troca;
	}

	public void setTroca(Boolean troca) {
		this.troca = troca;
	}

	public Boolean getLeilao() {
		return leilao;
	}

	public void setLeilao(Boolean leilao) {
		this.leilao = leilao;
	}

	public Status getStatus() {
		return status;
	}

	public void setStatus(Status status) {
		this.status = status;
	}

	public Calendar getDtPublicacao() {
		return dtPublicacao;
	}

	public void setDtPublicacao(Calendar dtPublicacao) {
		this.dtPublicacao = dtPublicacao;
	}

	public Calendar getValidade() {
		return validade;
	}

	public void setValidade(Calendar validade) {
		this.validade = validade;
	}

	public TblUf getTblUf() {
		return tblUf;
	}

	public void setTblUf(TblUf tblUf) {
		this.tblUf = tblUf;
	}

	public TblCidade getTblCidade() {
		return tblCidade;
	}

	public void setTblCidade(TblCidade tblCidade) {
		this.tblCidade = tblCidade;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((chave == null) ? 0 : chave.hashCode());
		result = prime * result + ((descricao == null) ? 0 : descricao.hashCode());
		result = prime * result + ((dtPublicacao == null) ? 0 : dtPublicacao.hashCode());
		result = prime * result + ((leilao == null) ? 0 : leilao.hashCode());
		result = prime * result + ((precoFinal == null) ? 0 : precoFinal.hashCode());
		result = prime * result + ((precoInicial == null) ? 0 : precoInicial.hashCode());
		result = prime * result + ((status == null) ? 0 : status.hashCode());
		result = prime * result + ((tblCidade == null) ? 0 : tblCidade.hashCode());
		result = prime * result + ((tblTipoAnuncio == null) ? 0 : tblTipoAnuncio.hashCode());
		result = prime * result + ((tblUf == null) ? 0 : tblUf.hashCode());
		result = prime * result + ((tblUsuario == null) ? 0 : tblUsuario.hashCode());
		result = prime * result + ((tblVeiculo == null) ? 0 : tblVeiculo.hashCode());
		result = prime * result + ((troca == null) ? 0 : troca.hashCode());
		result = prime * result + ((validade == null) ? 0 : validade.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		TblAnuncio other = (TblAnuncio) obj;
		if (chave == null) {
			if (other.chave != null)
				return false;
		} else if (!chave.equals(other.chave))
			return false;
		if (descricao == null) {
			if (other.descricao != null)
				return false;
		} else if (!descricao.equals(other.descricao))
			return false;
		if (dtPublicacao == null) {
			if (other.dtPublicacao != null)
				return false;
		} else if (!dtPublicacao.equals(other.dtPublicacao))
			return false;
		if (leilao == null) {
			if (other.leilao != null)
				return false;
		} else if (!leilao.equals(other.leilao))
			return false;
		if (precoFinal == null) {
			if (other.precoFinal != null)
				return false;
		} else if (!precoFinal.equals(other.precoFinal))
			return false;
		if (precoInicial == null) {
			if (other.precoInicial != null)
				return false;
		} else if (!precoInicial.equals(other.precoInicial))
			return false;
		if (status == null) {
			if (other.status != null)
				return false;
		} else if (!status.equals(other.status))
			return false;
		if (tblCidade == null) {
			if (other.tblCidade != null)
				return false;
		} else if (!tblCidade.equals(other.tblCidade))
			return false;
		if (tblTipoAnuncio == null) {
			if (other.tblTipoAnuncio != null)
				return false;
		} else if (!tblTipoAnuncio.equals(other.tblTipoAnuncio))
			return false;
		if (tblUf == null) {
			if (other.tblUf != null)
				return false;
		} else if (!tblUf.equals(other.tblUf))
			return false;
		if (tblUsuario == null) {
			if (other.tblUsuario != null)
				return false;
		} else if (!tblUsuario.equals(other.tblUsuario))
			return false;
		if (tblVeiculo == null) {
			if (other.tblVeiculo != null)
				return false;
		} else if (!tblVeiculo.equals(other.tblVeiculo))
			return false;
		if (troca == null) {
			if (other.troca != null)
				return false;
		} else if (!troca.equals(other.troca))
			return false;
		if (validade == null) {
			if (other.validade != null)
				return false;
		} else if (!validade.equals(other.validade))
			return false;
		return true;
	}

	@Override
	public String toString() {
		return "TblAnuncio [chave=" + chave + ", descricao=" + descricao + ", tblUsuario=" + tblUsuario
				+ ", tblVeiculo=" + tblVeiculo + ", precoInicial=" + precoInicial + ", precoFinal=" + precoFinal
				+ ", tblTipoAnuncio=" + tblTipoAnuncio + ", troca=" + troca + ", leilao=" + leilao + ", status="
				+ status + ", dtPublicacao=" + dtPublicacao + ", validade=" + validade + ", tblUf=" + tblUf
				+ ", tblCidade=" + tblCidade + "]";
	}
}
